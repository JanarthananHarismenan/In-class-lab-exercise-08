#include <iostream>
using namespace std;
  
// function to heapify the tree
void heapify(int arr[], int n, int root) 
{
    int largestNode = root; // Initialize largestNode as root
    int leftNode = 2*root + 1; // leftNode child index
    int rightNode = 2*root + 2; // rightNode child index
 
    // If leftNode child is larger than root
    if (leftNode < n && arr[leftNode] > arr[largestNode])
        largestNode = leftNode;
 
    // If rightNode child is larger than largestNode so far
    if (rightNode < n && arr[rightNode] > arr[largestNode])
        largestNode = rightNode;
 
    // If largestNode is not root
    if (largestNode != root) 
    {
        swap(arr[root], arr[largestNode]);
 
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largestNode);
    }
}

void heapSort(int arr[], int n) 
{
   // build heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

   // extracting elements from heap one by one
    for (int i = n - 1; i >= 0; i--) 
    {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}
  
/* print contents of array */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}
  
// main program
int main()
{
   int n;
   cout << "Enter the number of elements: ";
   cin >> n;
   
   int heap_arr[n];
   cout << "Enter " << n << " elements:\n";
   for (int i = 0; i < n; i++) 
   {
       cin >> heap_arr[i];
   }

   cout<<"Input array"<<endl;
   displayArray(heap_arr,n);
  
   heapSort(heap_arr, n);
  
   cout << "Sorted array"<<endl;
   displayArray(heap_arr, n);
}
